
#user http;
user mjw users;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /home/mjw/web/mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
    # TODO .well-known
    
    # matrix client-server api
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name matrix.wolff.io;
        ssl_certificate      /etc/letsencrypt/live/wolff.io/cert.pem;
        ssl_certificate_key  /etc/letsencrypt/live/wolff.io/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/wolff.io/cert.pem;
        location / {
            proxy_pass http://localhost:8008/_matrix/client;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
        location /_matrix {
            proxy_pass http://localhost:8008;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
    }

    # matrix server-server api
    server {
        listen 8448 ssl default_server;
        listen [::]:8448 ssl default_server;
        server_name wolff.io;
        ssl_certificate      /etc/letsencrypt/live/wolff.io/cert.pem;
        ssl_certificate_key  /etc/letsencrypt/live/wolff.io/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/wolff.io/cert.pem;
        location / {
            proxy_pass http://localhost:8008;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
    }   


    # fileserver
    server {
        listen       443 ssl;
        server_name  files.wolff.io;
        ssl_certificate      /etc/letsencrypt/live/wolff.io/cert.pem;
        ssl_certificate_key  /etc/letsencrypt/live/wolff.io/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/wolff.io/cert.pem;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location /private/ {
            alias   /home/mjw/web_private/;
            autoindex on;
            auth_basic "Movies";
            # TODO have this file be part of configuration
            auth_basic_user_file /home/mjw/htpasswd;
        }

        location / {
           root /home/mjw/web;
           autoindex on;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
    
        server_name jellyfin.wolff.io;
        # You can specify multiple domain names if you want
        #server_name jellyfin.local;
        ssl_certificate /etc/letsencrypt/live/wolff.io/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/wolff.io/privkey.pem; # managed by Certbot
        ssl_trusted_certificate /etc/letsencrypt/live/wolff.io/cert.pem;
        add_header Strict-Transport-Security "max-age=31536000" always;
        ssl_stapling on;
        ssl_stapling_verify on;
        # use a variable to store the upstream proxy
        # in this example we are using a hostname which is resolved via DNS
        # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)
        set $jellyfin 127.0.0.1;
        #resolver 127.0.0.1 valid=30;
    
        # Jellyfin
        #location /jellyfin {
        #    return 302 $scheme://$host/jellyfin/;
        #}
    
        location / {
            # Proxy main Jellyfin traffic
    
            # The / at the end is significant.
            # https://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/
    
            proxy_pass http://$jellyfin:8096;
    
            proxy_pass_request_headers on;
    
            proxy_set_header Host $host;
    
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
    
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $http_connection;
    
            # Disable buffering when the nginx proxy gets very resource heavy upon streaming
            proxy_buffering off;
        }
    
}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
